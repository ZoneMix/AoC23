package DayFour

#load "helpers"

use core {*}
use helpers {*}

Card :: struct {
    id: u32;
    wnum: [] u32;
    unum: [] u32;
}

Solve :: () -> void {
    PrintRes(
        PartOne(),
        PartTwo()
    );
}

GetCards :: () -> [..] Card {
    contents := GetContents("input/day_four.txt");
    cards: [..] Card;
    for line: contents {
        card: Card;
        wnum : [..] u32;
        unum: [..] u32;

        string.advance(&line, 4);

        card.id = ~~conv.parse_int(line);

        string.advance(&line, 5);
        tmp_wnum := string.split(
            string.read_until_any(&line, 0, '|'),
            32
        );
        string.advance(&line, 1);
        tmp_unum := string.split(
            string.read_until_any(&line, 0, '\n'),
            32
        );

        for elem: tmp_wnum do
            if !string.empty(elem) do
                wnum << ~~conv.parse_int(elem);

        for elem: tmp_unum do
            if !string.empty(elem) do
                unum << ~~conv.parse_int(elem);

        card.wnum = wnum;
        card.unum = unum;

        cards << card;
    }
    return cards;
}

GetMatches :: (card: Card) -> u32 {
    matches := 0;
    for w: card.wnum {
        for u: card.unum {
            if w == u {
                matches += 1;
            }
        }
    }
    return matches;
}

PartOne :: () -> u32 {
    cards := GetCards();
    total := 0;

    for card: cards {
        if GetMatches(card) == 0 do continue;
        total += 1 << GetMatches(card) - 1;
    }

    return total;
}

PartTwo :: () -> u32 {
    total := 0;
    cards := GetCards();
    card_map: Map(i32, i32);
    card_matches_map: Map(i32, i32);

    for card: cards {
        card_map->put(card.id, 1);
        card_matches_map->put(card.id, GetMatches(card));
    }

    count := 1;
    while count < cards.length {
        max := card_matches_map[count]? + 1;
        times := 0;
        while times < card_map[count]? {
            for x: 1 .. max {
                if max == 1 do continue;
                if count + x > cards.length do continue;
                card_map->put(count + x, card_map->get(count + x)? + 1);
            }
            times += 1;
        }
        count += 1;
    }

    for card: card_map->as_iter() do total += card.value;

    return total;
}