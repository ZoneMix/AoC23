package DayTwo

#load "helpers"

use core {*}
use helpers {*}

Game :: struct {
    id: i32;
    draws: [..] Draw;
}

Draw :: struct {
    red: i32;
    green: i32;
    blue: i32;
}

Solve :: () -> void {
    contents := GetContents("Days/input/day_two.txt");

    games := ParseGames(contents);

    PrintRes(
        PartOne(games),
        PartTwo(games)
    );
}

ParseGames :: (contents: [][] u8) -> [..] Game {
    games : [..] Game;

    for line: contents {
        string.advance(&line, 5);
        game_num := cast(i32) conv.parse_int(&line);
        string.advance(&line, 2);

        game: Game;
        game.id = game_num;

        draw: Draw;

        while !string.empty(line) {
            draw_hand := string.split(
                string.read_until_any(&line, 0, ',', ';'),
                32
            );

            draw_num : i32 = ~~conv.parse_int(draw_hand[0]);

            switch draw_hand[1] {
                case "red" do draw.red = draw_num;
                case "green" do draw.green = draw_num;
                case "blue" do draw.blue = draw_num;
            }

            string.advance(&line, 2);

            game.draws << draw;
        }
        games << game;
    }

    return games;
}

PartOne :: (games: [..] Game) -> u32 {
    red := 12;
    green := 13;
    blue := 14;
    total := 0;

    for game: games {
        possible := true;
        for draw: game.draws {
            if draw.red > red ||
            draw.green > green ||
            draw.blue > blue do possible = false;
        }

        if possible do total = total + game.id;
    }

    return total;
}

PartTwo :: (games: [..] Game) -> u32 {
    total := 0;

    for game: games {
        maxr := 0;
        maxg := 0;
        maxb := 0;
        for draw: game.draws {
            maxr = math.max(maxr, draw.red);
            maxg = math.max(maxg, draw.green);
            maxb = math.max(maxb, draw.blue);
        }
        total = total + (maxr * maxg * maxb);
    }

    return total;
}