package DayThree

#load "helpers"

use core {*}
use helpers {*}

Solve :: () -> void {
    contents := GetContents("input/day_three.txt");
    PrintRes(
        PartOne(contents),
        PartTwo(contents)
    );
}

CheckSpecial :: (contents: [][] u8, x, y, len: i32) -> bool {
    map_height := contents.length;
    map_width := contents[0].length;

    for i: 0 .. len {
        for row: -1 .. 2 {
            for col: -1 .. 2 {
                box_x := x + col + i;
                box_y := y + row;

                if box_x < 0 || box_x >= map_width ||
                    box_y < 0 || box_y >= map_height do continue;

                pos := contents[box_y][box_x];
                if pos->is_num() do continue;
                if pos == '.' do continue;
                if pos == '\n' do continue;

                return true;
            }
        }
    }
    return false;
}

GetTotalParts :: (contents: [][] u8) -> u32 {
    total := 0;

    map_height := contents.length;
    map_width := contents[0].length;

    for y: 0 .. map_height {
        for x: 0 .. map_width {
            if !contents[y][x]->is_num() do continue;
            len := 0;
            num := cast(i32) conv.parse_int(contents[y][x .. map_width]);

            if num <= 999 do len = 3;
            if num <= 99 do len = 2;
            if num <= 9 do len = 1;
            if CheckSpecial(contents, x, y, len) do total += num;
            for i: 0 .. len do contents[y][x + i] = '.';
        }
    }
    return total;
}

PartOne :: (contents: [][] u8) -> u32 {
    return GetTotalParts(contents);
}

PartTwo :: (contents: [][] u8) -> u32 {
    return 0;
}